{"mappings":"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","sources":["index.js"],"sourcesContent":["// 필요한 Dom Selector\r\nconst $stars = document.querySelector('.stars')\r\nconst $score = document.querySelector('.score')\r\nconst $reset = document.querySelector('.reset')\r\n\r\n// 별의 갯수 = Score\r\nconst MAX_SCORE = 5\r\n\r\n// 별의 현재 점수 상태\r\nconst state = {\r\n  score: 0\r\n}\r\n\r\n// 별의 갯수만큼 별 DOM 추가 (별은 empty, half, full 클래스를 가질수 있음)\r\nArray(MAX_SCORE)\r\n  .fill()\r\n  .forEach(() => {\r\n    const star = document.createElement('div')\r\n    star.className = 'star empty'\r\n    $stars.appendChild(star)\r\n  })\r\n\r\n// score을 받아서 별의 현재 점수 표시를 업데이트 해주는 함수\r\nconst setDisplayScore = (score) => {\r\n  // $stars.children는 노드 리스트를 가져오기 때문에 spread 문법으로 풀어서 배열로 바꾼다.\r\n  const startList = [...$stars.children]\r\n  // 하나씩 돌면서(forEach) 첫번째 인자로 DOM이 넘어오고(star) 두번째 인자로 index가 넘어온다.\r\n  startList.forEach((star, i) => {\r\n    // ex) 현재 score가 2점이면 index는 1보다 작아야 함\r\n    // 현재 score보다 낮은 index : 반만 차있거나 꽉 차있거나\r\n    if(score > i){\r\n      if (score - i === 0.5){\r\n        star.className = 'star half'\r\n      }else{\r\n        star.className = 'star full'\r\n      }\r\n    }else{\r\n      // 점수 외의 별은 비어야 한다\r\n      star.className = 'star empty'\r\n    }\r\n  })\r\n}\r\n\r\nconst setScore = (score) => {\r\n  // 현재 점수상태값 업데이트해줌\r\n  setDisplayScore(score)\r\n  // const state의 score값 업데이트\r\n  state.score = score\r\n  $score.textContent = score\r\n}\r\n\r\n// 이벤트를 받아서 어떤 값들을 계산해서 지금 현재 누른 값이 score가 몇점인지를 계산해주는 함수\r\nconst calculateScore = (e) => {\r\n  // DOM.getBoundingClientRect() : 위치 구하기\r\n  const {width, left} = e.currentTarget.getBoundingClientRect()\r\n  // clientX : 현재 viewport 안에서 마우스로 누를 위치가 어디인지를 나타내는 event property\r\n  // e.clientX - left : stars의 왼쪽끝부터 마우스를 누른 위치까지 좌표\r\n  const x = e.clientX - left\r\n  // 별 반개의 width\r\n  const scale = width / MAX_SCORE / 2\r\n  // 현재 마우스를 누른 위치의 점수\r\n  const score = Math.floor(x / scale + 1) / 2\r\n  return score\r\n}\r\n\r\n$stars.addEventListener('click', (e) => {\r\n  setScore(calculateScore(e))\r\n})\r\n\r\n// 마우스오버했을 때 몇점인지 표시만 해주는 작업\r\n// 실제 별의 상태는 업데이트해주지 않고 별의 표시값만 업데이트해줌\r\n$stars.addEventListener('mousemove', (e) => {\r\n  const score = calculateScore(e)\r\n  setDisplayScore(score)\r\n})\r\n\r\n// 별영역을 마우스가 빠져나갔을때 다시 원래 별이 가지고 있던 점수값으로 되돌려줌\r\n$stars.addEventListener('mouseleave', (e) => {\r\n  setDisplayScore(state.score)\r\n})\r\n\r\n// 리셋버튼\r\n$reset.addEventListener('click', () => {\r\n  setScore(0)\r\n})"],"names":[],"version":3,"file":"index.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}